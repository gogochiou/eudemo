# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main2021/maintomission.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class maintomission(genpy.Message):
  _md5sum = "a6c4bebd0fdd628f3d960dc0cc16a1cf"
  _type = "main2021/maintomission"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 team
int32 action
int32 planer_state
float32[] action_pos
int32[] cup
int32[] hand
int32[] reef
bool NS
bool emerg
"""
  __slots__ = ['team','action','planer_state','action_pos','cup','hand','reef','NS','emerg']
  _slot_types = ['int32','int32','int32','float32[]','int32[]','int32[]','int32[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       team,action,planer_state,action_pos,cup,hand,reef,NS,emerg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(maintomission, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.team is None:
        self.team = 0
      if self.action is None:
        self.action = 0
      if self.planer_state is None:
        self.planer_state = 0
      if self.action_pos is None:
        self.action_pos = []
      if self.cup is None:
        self.cup = []
      if self.hand is None:
        self.hand = []
      if self.reef is None:
        self.reef = []
      if self.NS is None:
        self.NS = False
      if self.emerg is None:
        self.emerg = False
    else:
      self.team = 0
      self.action = 0
      self.planer_state = 0
      self.action_pos = []
      self.cup = []
      self.hand = []
      self.reef = []
      self.NS = False
      self.emerg = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.team, _x.action, _x.planer_state))
      length = len(self.action_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.action_pos))
      length = len(self.cup)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.cup))
      length = len(self.hand)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.hand))
      length = len(self.reef)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.reef))
      _x = self
      buff.write(_get_struct_2B().pack(_x.NS, _x.emerg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.team, _x.action, _x.planer_state,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.hand = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reef = s.unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.NS, _x.emerg,) = _get_struct_2B().unpack(str[start:end])
      self.NS = bool(self.NS)
      self.emerg = bool(self.emerg)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.team, _x.action, _x.planer_state))
      length = len(self.action_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.action_pos.tostring())
      length = len(self.cup)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cup.tostring())
      length = len(self.hand)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.hand.tostring())
      length = len(self.reef)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.reef.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.NS, _x.emerg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.team, _x.action, _x.planer_state,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.hand = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reef = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 2
      (_x.NS, _x.emerg,) = _get_struct_2B().unpack(str[start:end])
      self.NS = bool(self.NS)
      self.emerg = bool(self.emerg)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
