# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main2021/dataToAgent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class dataToAgent(genpy.Message):
  _md5sum = "56de11d3f3dff1ceee2e16f5c9720d89"
  _type = "main2021/dataToAgent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
float32 fx
float32 fy
float32 degree
int32[] action
int32[] action_list
int32[] cup_color
int32 cup
int32 script
bool ns
bool team
float32 time
int32 status
"""
  __slots__ = ['x','y','fx','fy','degree','action','action_list','cup_color','cup','script','ns','team','time','status']
  _slot_types = ['float32','float32','float32','float32','float32','int32[]','int32[]','int32[]','int32','int32','bool','bool','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,fx,fy,degree,action,action_list,cup_color,cup,script,ns,team,time,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dataToAgent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.degree is None:
        self.degree = 0.
      if self.action is None:
        self.action = []
      if self.action_list is None:
        self.action_list = []
      if self.cup_color is None:
        self.cup_color = []
      if self.cup is None:
        self.cup = 0
      if self.script is None:
        self.script = 0
      if self.ns is None:
        self.ns = False
      if self.team is None:
        self.team = False
      if self.time is None:
        self.time = 0.
      if self.status is None:
        self.status = 0
    else:
      self.x = 0.
      self.y = 0.
      self.fx = 0.
      self.fy = 0.
      self.degree = 0.
      self.action = []
      self.action_list = []
      self.cup_color = []
      self.cup = 0
      self.script = 0
      self.ns = False
      self.team = False
      self.time = 0.
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.fx, _x.fy, _x.degree))
      length = len(self.action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.action))
      length = len(self.action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.action_list))
      length = len(self.cup_color)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.cup_color))
      _x = self
      buff.write(_get_struct_2i2Bfi().pack(_x.cup, _x.script, _x.ns, _x.team, _x.time, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.x, _x.y, _x.fx, _x.fy, _x.degree,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup_color = s.unpack(str[start:end])
      _x = self
      start = end
      end += 18
      (_x.cup, _x.script, _x.ns, _x.team, _x.time, _x.status,) = _get_struct_2i2Bfi().unpack(str[start:end])
      self.ns = bool(self.ns)
      self.team = bool(self.team)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.fx, _x.fy, _x.degree))
      length = len(self.action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.action.tostring())
      length = len(self.action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.action_list.tostring())
      length = len(self.cup_color)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cup_color.tostring())
      _x = self
      buff.write(_get_struct_2i2Bfi().pack(_x.cup, _x.script, _x.ns, _x.team, _x.time, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.x, _x.y, _x.fx, _x.fy, _x.degree,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_list = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup_color = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 18
      (_x.cup, _x.script, _x.ns, _x.team, _x.time, _x.status,) = _get_struct_2i2Bfi().unpack(str[start:end])
      self.ns = bool(self.ns)
      self.team = bool(self.team)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2Bfi = None
def _get_struct_2i2Bfi():
    global _struct_2i2Bfi
    if _struct_2i2Bfi is None:
        _struct_2i2Bfi = struct.Struct("<2i2Bfi")
    return _struct_2i2Bfi
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
