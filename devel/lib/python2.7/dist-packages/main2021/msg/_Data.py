# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main2021/Data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Data(genpy.Message):
  _md5sum = "a4e5f8be870de6fe33323461ba490ff0"
  _type = "main2021/Data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32[] big_chicken_pos
float32[] small_chicken_pos
int32[] big_action
int32[] small_action
int32[] big_action_list
int32[] small_action_list
int32 big_cup
int32 small_cup
bool team
int32 status
int32 small_score
int32 big_score

"""
  __slots__ = ['big_chicken_pos','small_chicken_pos','big_action','small_action','big_action_list','small_action_list','big_cup','small_cup','team','status','small_score','big_score']
  _slot_types = ['float32[]','float32[]','int32[]','int32[]','int32[]','int32[]','int32','int32','bool','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       big_chicken_pos,small_chicken_pos,big_action,small_action,big_action_list,small_action_list,big_cup,small_cup,team,status,small_score,big_score

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.big_chicken_pos is None:
        self.big_chicken_pos = []
      if self.small_chicken_pos is None:
        self.small_chicken_pos = []
      if self.big_action is None:
        self.big_action = []
      if self.small_action is None:
        self.small_action = []
      if self.big_action_list is None:
        self.big_action_list = []
      if self.small_action_list is None:
        self.small_action_list = []
      if self.big_cup is None:
        self.big_cup = 0
      if self.small_cup is None:
        self.small_cup = 0
      if self.team is None:
        self.team = False
      if self.status is None:
        self.status = 0
      if self.small_score is None:
        self.small_score = 0
      if self.big_score is None:
        self.big_score = 0
    else:
      self.big_chicken_pos = []
      self.small_chicken_pos = []
      self.big_action = []
      self.small_action = []
      self.big_action_list = []
      self.small_action_list = []
      self.big_cup = 0
      self.small_cup = 0
      self.team = False
      self.status = 0
      self.small_score = 0
      self.big_score = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.big_chicken_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.big_chicken_pos))
      length = len(self.small_chicken_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.small_chicken_pos))
      length = len(self.big_action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.big_action))
      length = len(self.small_action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.small_action))
      length = len(self.big_action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.big_action_list))
      length = len(self.small_action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.small_action_list))
      _x = self
      buff.write(_get_struct_2iB3i().pack(_x.big_cup, _x.small_cup, _x.team, _x.status, _x.small_score, _x.big_score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.big_chicken_pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.small_chicken_pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.big_action = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.small_action = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.big_action_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.small_action_list = s.unpack(str[start:end])
      _x = self
      start = end
      end += 21
      (_x.big_cup, _x.small_cup, _x.team, _x.status, _x.small_score, _x.big_score,) = _get_struct_2iB3i().unpack(str[start:end])
      self.team = bool(self.team)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.big_chicken_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.big_chicken_pos.tostring())
      length = len(self.small_chicken_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.small_chicken_pos.tostring())
      length = len(self.big_action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.big_action.tostring())
      length = len(self.small_action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.small_action.tostring())
      length = len(self.big_action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.big_action_list.tostring())
      length = len(self.small_action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.small_action_list.tostring())
      _x = self
      buff.write(_get_struct_2iB3i().pack(_x.big_cup, _x.small_cup, _x.team, _x.status, _x.small_score, _x.big_score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.big_chicken_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.small_chicken_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.big_action = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.small_action = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.big_action_list = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.small_action_list = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 21
      (_x.big_cup, _x.small_cup, _x.team, _x.status, _x.small_score, _x.big_score,) = _get_struct_2iB3i().unpack(str[start:end])
      self.team = bool(self.team)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iB3i = None
def _get_struct_2iB3i():
    global _struct_2iB3i
    if _struct_2iB3i is None:
        _struct_2iB3i = struct.Struct("<2iB3i")
    return _struct_2iB3i
