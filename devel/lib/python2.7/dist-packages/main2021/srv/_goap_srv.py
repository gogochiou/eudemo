# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main2021/goap_srvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class goap_srvRequest(genpy.Message):
  _md5sum = "d1490fd0b27b9ab372d3cb1990ac81e9"
  _type = "main2021/goap_srvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32[] my_pos
float32[] friend_pos
bool ns
bool emergency
bool team
float32 time
int32[] friend_action
int32[] action_list
int32[] cup_color
int32 cup
int32[] hand
float32[] enemy1_pos
float32[] enemy2_pos
int32 strategy
"""
  __slots__ = ['my_pos','friend_pos','ns','emergency','team','time','friend_action','action_list','cup_color','cup','hand','enemy1_pos','enemy2_pos','strategy']
  _slot_types = ['float32[]','float32[]','bool','bool','bool','float32','int32[]','int32[]','int32[]','int32','int32[]','float32[]','float32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       my_pos,friend_pos,ns,emergency,team,time,friend_action,action_list,cup_color,cup,hand,enemy1_pos,enemy2_pos,strategy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(goap_srvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.my_pos is None:
        self.my_pos = []
      if self.friend_pos is None:
        self.friend_pos = []
      if self.ns is None:
        self.ns = False
      if self.emergency is None:
        self.emergency = False
      if self.team is None:
        self.team = False
      if self.time is None:
        self.time = 0.
      if self.friend_action is None:
        self.friend_action = []
      if self.action_list is None:
        self.action_list = []
      if self.cup_color is None:
        self.cup_color = []
      if self.cup is None:
        self.cup = 0
      if self.hand is None:
        self.hand = []
      if self.enemy1_pos is None:
        self.enemy1_pos = []
      if self.enemy2_pos is None:
        self.enemy2_pos = []
      if self.strategy is None:
        self.strategy = 0
    else:
      self.my_pos = []
      self.friend_pos = []
      self.ns = False
      self.emergency = False
      self.team = False
      self.time = 0.
      self.friend_action = []
      self.action_list = []
      self.cup_color = []
      self.cup = 0
      self.hand = []
      self.enemy1_pos = []
      self.enemy2_pos = []
      self.strategy = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.my_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.my_pos))
      length = len(self.friend_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.friend_pos))
      _x = self
      buff.write(_get_struct_3Bf().pack(_x.ns, _x.emergency, _x.team, _x.time))
      length = len(self.friend_action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.friend_action))
      length = len(self.action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.action_list))
      length = len(self.cup_color)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.cup_color))
      _x = self.cup
      buff.write(_get_struct_i().pack(_x))
      length = len(self.hand)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.hand))
      length = len(self.enemy1_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.enemy1_pos))
      length = len(self.enemy2_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.enemy2_pos))
      _x = self.strategy
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.my_pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.friend_pos = s.unpack(str[start:end])
      _x = self
      start = end
      end += 7
      (_x.ns, _x.emergency, _x.team, _x.time,) = _get_struct_3Bf().unpack(str[start:end])
      self.ns = bool(self.ns)
      self.emergency = bool(self.emergency)
      self.team = bool(self.team)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.friend_action = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_list = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup_color = s.unpack(str[start:end])
      start = end
      end += 4
      (self.cup,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.hand = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.enemy1_pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.enemy2_pos = s.unpack(str[start:end])
      start = end
      end += 4
      (self.strategy,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.my_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.my_pos.tostring())
      length = len(self.friend_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.friend_pos.tostring())
      _x = self
      buff.write(_get_struct_3Bf().pack(_x.ns, _x.emergency, _x.team, _x.time))
      length = len(self.friend_action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.friend_action.tostring())
      length = len(self.action_list)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.action_list.tostring())
      length = len(self.cup_color)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cup_color.tostring())
      _x = self.cup
      buff.write(_get_struct_i().pack(_x))
      length = len(self.hand)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.hand.tostring())
      length = len(self.enemy1_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.enemy1_pos.tostring())
      length = len(self.enemy2_pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.enemy2_pos.tostring())
      _x = self.strategy
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.my_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.friend_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 7
      (_x.ns, _x.emergency, _x.team, _x.time,) = _get_struct_3Bf().unpack(str[start:end])
      self.ns = bool(self.ns)
      self.emergency = bool(self.emergency)
      self.team = bool(self.team)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.friend_action = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_list = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup_color = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.cup,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.hand = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.enemy1_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.enemy2_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.strategy,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Bf = None
def _get_struct_3Bf():
    global _struct_3Bf
    if _struct_3Bf is None:
        _struct_3Bf = struct.Struct("<3Bf")
    return _struct_3Bf
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from main2021/goap_srvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class goap_srvResponse(genpy.Message):
  _md5sum = "2169fa9d7628a56d4dc281fba88acaa2"
  _type = "main2021/goap_srvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[] action
float32[] position
int32[] cup

"""
  __slots__ = ['action','position','cup']
  _slot_types = ['int32[]','float32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action,position,cup

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(goap_srvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = []
      if self.position is None:
        self.position = []
      if self.cup is None:
        self.cup = []
    else:
      self.action = []
      self.position = []
      self.cup = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.action))
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.position))
      length = len(self.cup)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.cup))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.action)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.action.tostring())
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.position.tostring())
      length = len(self.cup)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cup.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cup = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class goap_srv(object):
  _type          = 'main2021/goap_srv'
  _md5sum = '93ddba8ccf100824f0cb0d18004bda97'
  _request_class  = goap_srvRequest
  _response_class = goap_srvResponse
