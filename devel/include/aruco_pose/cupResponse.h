// Generated by gencpp from file aruco_pose/cupResponse.msg
// DO NOT EDIT!


#ifndef ARUCO_POSE_MESSAGE_CUPRESPONSE_H
#define ARUCO_POSE_MESSAGE_CUPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aruco_pose
{
template <class ContainerAllocator>
struct cupResponse_
{
  typedef cupResponse_<ContainerAllocator> Type;

  cupResponse_()
    : cup_result()  {
    }
  cupResponse_(const ContainerAllocator& _alloc)
    : cup_result(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cup_result_type;
  _cup_result_type cup_result;





  typedef boost::shared_ptr< ::aruco_pose::cupResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco_pose::cupResponse_<ContainerAllocator> const> ConstPtr;

}; // struct cupResponse_

typedef ::aruco_pose::cupResponse_<std::allocator<void> > cupResponse;

typedef boost::shared_ptr< ::aruco_pose::cupResponse > cupResponsePtr;
typedef boost::shared_ptr< ::aruco_pose::cupResponse const> cupResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aruco_pose::cupResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aruco_pose::cupResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aruco_pose::cupResponse_<ContainerAllocator1> & lhs, const ::aruco_pose::cupResponse_<ContainerAllocator2> & rhs)
{
  return lhs.cup_result == rhs.cup_result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aruco_pose::cupResponse_<ContainerAllocator1> & lhs, const ::aruco_pose::cupResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aruco_pose

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aruco_pose::cupResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco_pose::cupResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_pose::cupResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_pose::cupResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_pose::cupResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_pose::cupResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aruco_pose::cupResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f032d9fb8f53b20dbf71031171aac863";
  }

  static const char* value(const ::aruco_pose::cupResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf032d9fb8f53b20dULL;
  static const uint64_t static_value2 = 0xbf71031171aac863ULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco_pose::cupResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aruco_pose/cupResponse";
  }

  static const char* value(const ::aruco_pose::cupResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aruco_pose::cupResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] cup_result\n"
"\n"
;
  }

  static const char* value(const ::aruco_pose::cupResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aruco_pose::cupResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cup_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cupResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco_pose::cupResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aruco_pose::cupResponse_<ContainerAllocator>& v)
  {
    s << indent << "cup_result[]" << std::endl;
    for (size_t i = 0; i < v.cup_result.size(); ++i)
    {
      s << indent << "  cup_result[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.cup_result[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARUCO_POSE_MESSAGE_CUPRESPONSE_H
