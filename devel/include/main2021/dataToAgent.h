// Generated by gencpp from file main2021/dataToAgent.msg
// DO NOT EDIT!


#ifndef MAIN2021_MESSAGE_DATATOAGENT_H
#define MAIN2021_MESSAGE_DATATOAGENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main2021
{
template <class ContainerAllocator>
struct dataToAgent_
{
  typedef dataToAgent_<ContainerAllocator> Type;

  dataToAgent_()
    : x(0.0)
    , y(0.0)
    , fx(0.0)
    , fy(0.0)
    , degree(0.0)
    , action()
    , action_list()
    , cup_color()
    , cup(0)
    , script(0)
    , ns(false)
    , team(false)
    , time(0.0)
    , status(0)  {
    }
  dataToAgent_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , fx(0.0)
    , fy(0.0)
    , degree(0.0)
    , action(_alloc)
    , action_list(_alloc)
    , cup_color(_alloc)
    , cup(0)
    , script(0)
    , ns(false)
    , team(false)
    , time(0.0)
    , status(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _fx_type;
  _fx_type fx;

   typedef float _fy_type;
  _fy_type fy;

   typedef float _degree_type;
  _degree_type degree;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _action_type;
  _action_type action;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _action_list_type;
  _action_list_type action_list;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cup_color_type;
  _cup_color_type cup_color;

   typedef int32_t _cup_type;
  _cup_type cup;

   typedef int32_t _script_type;
  _script_type script;

   typedef uint8_t _ns_type;
  _ns_type ns;

   typedef uint8_t _team_type;
  _team_type team;

   typedef float _time_type;
  _time_type time;

   typedef int32_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::main2021::dataToAgent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main2021::dataToAgent_<ContainerAllocator> const> ConstPtr;

}; // struct dataToAgent_

typedef ::main2021::dataToAgent_<std::allocator<void> > dataToAgent;

typedef boost::shared_ptr< ::main2021::dataToAgent > dataToAgentPtr;
typedef boost::shared_ptr< ::main2021::dataToAgent const> dataToAgentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main2021::dataToAgent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main2021::dataToAgent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main2021::dataToAgent_<ContainerAllocator1> & lhs, const ::main2021::dataToAgent_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.fx == rhs.fx &&
    lhs.fy == rhs.fy &&
    lhs.degree == rhs.degree &&
    lhs.action == rhs.action &&
    lhs.action_list == rhs.action_list &&
    lhs.cup_color == rhs.cup_color &&
    lhs.cup == rhs.cup &&
    lhs.script == rhs.script &&
    lhs.ns == rhs.ns &&
    lhs.team == rhs.team &&
    lhs.time == rhs.time &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main2021::dataToAgent_<ContainerAllocator1> & lhs, const ::main2021::dataToAgent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main2021

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main2021::dataToAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main2021::dataToAgent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::dataToAgent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::dataToAgent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::dataToAgent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::dataToAgent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main2021::dataToAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56de11d3f3dff1ceee2e16f5c9720d89";
  }

  static const char* value(const ::main2021::dataToAgent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56de11d3f3dff1ceULL;
  static const uint64_t static_value2 = 0xee2e16f5c9720d89ULL;
};

template<class ContainerAllocator>
struct DataType< ::main2021::dataToAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main2021/dataToAgent";
  }

  static const char* value(const ::main2021::dataToAgent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main2021::dataToAgent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 fx\n"
"float32 fy\n"
"float32 degree\n"
"int32[] action\n"
"int32[] action_list\n"
"int32[] cup_color\n"
"int32 cup\n"
"int32 script\n"
"bool ns\n"
"bool team\n"
"float32 time\n"
"int32 status\n"
;
  }

  static const char* value(const ::main2021::dataToAgent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main2021::dataToAgent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.fx);
      stream.next(m.fy);
      stream.next(m.degree);
      stream.next(m.action);
      stream.next(m.action_list);
      stream.next(m.cup_color);
      stream.next(m.cup);
      stream.next(m.script);
      stream.next(m.ns);
      stream.next(m.team);
      stream.next(m.time);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dataToAgent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main2021::dataToAgent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main2021::dataToAgent_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "fx: ";
    Printer<float>::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    Printer<float>::stream(s, indent + "  ", v.fy);
    s << indent << "degree: ";
    Printer<float>::stream(s, indent + "  ", v.degree);
    s << indent << "action[]" << std::endl;
    for (size_t i = 0; i < v.action.size(); ++i)
    {
      s << indent << "  action[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.action[i]);
    }
    s << indent << "action_list[]" << std::endl;
    for (size_t i = 0; i < v.action_list.size(); ++i)
    {
      s << indent << "  action_list[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.action_list[i]);
    }
    s << indent << "cup_color[]" << std::endl;
    for (size_t i = 0; i < v.cup_color.size(); ++i)
    {
      s << indent << "  cup_color[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.cup_color[i]);
    }
    s << indent << "cup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cup);
    s << indent << "script: ";
    Printer<int32_t>::stream(s, indent + "  ", v.script);
    s << indent << "ns: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ns);
    s << indent << "team: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.team);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN2021_MESSAGE_DATATOAGENT_H
