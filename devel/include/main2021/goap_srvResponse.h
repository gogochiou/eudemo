// Generated by gencpp from file main2021/goap_srvResponse.msg
// DO NOT EDIT!


#ifndef MAIN2021_MESSAGE_GOAP_SRVRESPONSE_H
#define MAIN2021_MESSAGE_GOAP_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main2021
{
template <class ContainerAllocator>
struct goap_srvResponse_
{
  typedef goap_srvResponse_<ContainerAllocator> Type;

  goap_srvResponse_()
    : action()
    , position()
    , cup()  {
    }
  goap_srvResponse_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , position(_alloc)
    , cup(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _action_type;
  _action_type action;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _position_type;
  _position_type position;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cup_type;
  _cup_type cup;





  typedef boost::shared_ptr< ::main2021::goap_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main2021::goap_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct goap_srvResponse_

typedef ::main2021::goap_srvResponse_<std::allocator<void> > goap_srvResponse;

typedef boost::shared_ptr< ::main2021::goap_srvResponse > goap_srvResponsePtr;
typedef boost::shared_ptr< ::main2021::goap_srvResponse const> goap_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main2021::goap_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main2021::goap_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main2021::goap_srvResponse_<ContainerAllocator1> & lhs, const ::main2021::goap_srvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.position == rhs.position &&
    lhs.cup == rhs.cup;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main2021::goap_srvResponse_<ContainerAllocator1> & lhs, const ::main2021::goap_srvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main2021

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main2021::goap_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main2021::goap_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::goap_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::goap_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::goap_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::goap_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main2021::goap_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2169fa9d7628a56d4dc281fba88acaa2";
  }

  static const char* value(const ::main2021::goap_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2169fa9d7628a56dULL;
  static const uint64_t static_value2 = 0x4dc281fba88acaa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::main2021::goap_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main2021/goap_srvResponse";
  }

  static const char* value(const ::main2021::goap_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main2021::goap_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] action\n"
"float32[] position\n"
"int32[] cup\n"
"\n"
;
  }

  static const char* value(const ::main2021::goap_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main2021::goap_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.position);
      stream.next(m.cup);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goap_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main2021::goap_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main2021::goap_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "action[]" << std::endl;
    for (size_t i = 0; i < v.action.size(); ++i)
    {
      s << indent << "  action[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.action[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "cup[]" << std::endl;
    for (size_t i = 0; i < v.cup.size(); ++i)
    {
      s << indent << "  cup[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.cup[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN2021_MESSAGE_GOAP_SRVRESPONSE_H
