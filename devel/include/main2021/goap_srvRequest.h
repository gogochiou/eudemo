// Generated by gencpp from file main2021/goap_srvRequest.msg
// DO NOT EDIT!


#ifndef MAIN2021_MESSAGE_GOAP_SRVREQUEST_H
#define MAIN2021_MESSAGE_GOAP_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main2021
{
template <class ContainerAllocator>
struct goap_srvRequest_
{
  typedef goap_srvRequest_<ContainerAllocator> Type;

  goap_srvRequest_()
    : my_pos()
    , friend_pos()
    , ns(false)
    , emergency(false)
    , team(false)
    , time(0.0)
    , friend_action()
    , action_list()
    , cup_color()
    , cup(0)
    , hand()
    , enemy1_pos()
    , enemy2_pos()
    , strategy(0)  {
    }
  goap_srvRequest_(const ContainerAllocator& _alloc)
    : my_pos(_alloc)
    , friend_pos(_alloc)
    , ns(false)
    , emergency(false)
    , team(false)
    , time(0.0)
    , friend_action(_alloc)
    , action_list(_alloc)
    , cup_color(_alloc)
    , cup(0)
    , hand(_alloc)
    , enemy1_pos(_alloc)
    , enemy2_pos(_alloc)
    , strategy(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _my_pos_type;
  _my_pos_type my_pos;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _friend_pos_type;
  _friend_pos_type friend_pos;

   typedef uint8_t _ns_type;
  _ns_type ns;

   typedef uint8_t _emergency_type;
  _emergency_type emergency;

   typedef uint8_t _team_type;
  _team_type team;

   typedef float _time_type;
  _time_type time;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _friend_action_type;
  _friend_action_type friend_action;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _action_list_type;
  _action_list_type action_list;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cup_color_type;
  _cup_color_type cup_color;

   typedef int32_t _cup_type;
  _cup_type cup;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _hand_type;
  _hand_type hand;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _enemy1_pos_type;
  _enemy1_pos_type enemy1_pos;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _enemy2_pos_type;
  _enemy2_pos_type enemy2_pos;

   typedef int32_t _strategy_type;
  _strategy_type strategy;





  typedef boost::shared_ptr< ::main2021::goap_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main2021::goap_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct goap_srvRequest_

typedef ::main2021::goap_srvRequest_<std::allocator<void> > goap_srvRequest;

typedef boost::shared_ptr< ::main2021::goap_srvRequest > goap_srvRequestPtr;
typedef boost::shared_ptr< ::main2021::goap_srvRequest const> goap_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main2021::goap_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main2021::goap_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main2021::goap_srvRequest_<ContainerAllocator1> & lhs, const ::main2021::goap_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.my_pos == rhs.my_pos &&
    lhs.friend_pos == rhs.friend_pos &&
    lhs.ns == rhs.ns &&
    lhs.emergency == rhs.emergency &&
    lhs.team == rhs.team &&
    lhs.time == rhs.time &&
    lhs.friend_action == rhs.friend_action &&
    lhs.action_list == rhs.action_list &&
    lhs.cup_color == rhs.cup_color &&
    lhs.cup == rhs.cup &&
    lhs.hand == rhs.hand &&
    lhs.enemy1_pos == rhs.enemy1_pos &&
    lhs.enemy2_pos == rhs.enemy2_pos &&
    lhs.strategy == rhs.strategy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main2021::goap_srvRequest_<ContainerAllocator1> & lhs, const ::main2021::goap_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main2021

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main2021::goap_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main2021::goap_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::goap_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::goap_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::goap_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::goap_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main2021::goap_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1490fd0b27b9ab372d3cb1990ac81e9";
  }

  static const char* value(const ::main2021::goap_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1490fd0b27b9ab3ULL;
  static const uint64_t static_value2 = 0x72d3cb1990ac81e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::main2021::goap_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main2021/goap_srvRequest";
  }

  static const char* value(const ::main2021::goap_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main2021::goap_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] my_pos\n"
"float32[] friend_pos\n"
"bool ns\n"
"bool emergency\n"
"bool team\n"
"float32 time\n"
"int32[] friend_action\n"
"int32[] action_list\n"
"int32[] cup_color\n"
"int32 cup\n"
"int32[] hand\n"
"float32[] enemy1_pos\n"
"float32[] enemy2_pos\n"
"int32 strategy\n"
;
  }

  static const char* value(const ::main2021::goap_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main2021::goap_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.my_pos);
      stream.next(m.friend_pos);
      stream.next(m.ns);
      stream.next(m.emergency);
      stream.next(m.team);
      stream.next(m.time);
      stream.next(m.friend_action);
      stream.next(m.action_list);
      stream.next(m.cup_color);
      stream.next(m.cup);
      stream.next(m.hand);
      stream.next(m.enemy1_pos);
      stream.next(m.enemy2_pos);
      stream.next(m.strategy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goap_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main2021::goap_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main2021::goap_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "my_pos[]" << std::endl;
    for (size_t i = 0; i < v.my_pos.size(); ++i)
    {
      s << indent << "  my_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.my_pos[i]);
    }
    s << indent << "friend_pos[]" << std::endl;
    for (size_t i = 0; i < v.friend_pos.size(); ++i)
    {
      s << indent << "  friend_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.friend_pos[i]);
    }
    s << indent << "ns: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ns);
    s << indent << "emergency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "team: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.team);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "friend_action[]" << std::endl;
    for (size_t i = 0; i < v.friend_action.size(); ++i)
    {
      s << indent << "  friend_action[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.friend_action[i]);
    }
    s << indent << "action_list[]" << std::endl;
    for (size_t i = 0; i < v.action_list.size(); ++i)
    {
      s << indent << "  action_list[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.action_list[i]);
    }
    s << indent << "cup_color[]" << std::endl;
    for (size_t i = 0; i < v.cup_color.size(); ++i)
    {
      s << indent << "  cup_color[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.cup_color[i]);
    }
    s << indent << "cup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cup);
    s << indent << "hand[]" << std::endl;
    for (size_t i = 0; i < v.hand.size(); ++i)
    {
      s << indent << "  hand[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.hand[i]);
    }
    s << indent << "enemy1_pos[]" << std::endl;
    for (size_t i = 0; i < v.enemy1_pos.size(); ++i)
    {
      s << indent << "  enemy1_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.enemy1_pos[i]);
    }
    s << indent << "enemy2_pos[]" << std::endl;
    for (size_t i = 0; i < v.enemy2_pos.size(); ++i)
    {
      s << indent << "  enemy2_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.enemy2_pos[i]);
    }
    s << indent << "strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.strategy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN2021_MESSAGE_GOAP_SRVREQUEST_H
