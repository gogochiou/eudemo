// Generated by gencpp from file main2021/Data.msg
// DO NOT EDIT!


#ifndef MAIN2021_MESSAGE_DATA_H
#define MAIN2021_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace main2021
{
template <class ContainerAllocator>
struct Data_
{
  typedef Data_<ContainerAllocator> Type;

  Data_()
    : big_chicken_pos()
    , small_chicken_pos()
    , big_action()
    , small_action()
    , big_action_list()
    , small_action_list()
    , big_cup(0)
    , small_cup(0)
    , team(false)
    , status(0)
    , small_score(0)
    , big_score(0)  {
    }
  Data_(const ContainerAllocator& _alloc)
    : big_chicken_pos(_alloc)
    , small_chicken_pos(_alloc)
    , big_action(_alloc)
    , small_action(_alloc)
    , big_action_list(_alloc)
    , small_action_list(_alloc)
    , big_cup(0)
    , small_cup(0)
    , team(false)
    , status(0)
    , small_score(0)
    , big_score(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _big_chicken_pos_type;
  _big_chicken_pos_type big_chicken_pos;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _small_chicken_pos_type;
  _small_chicken_pos_type small_chicken_pos;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _big_action_type;
  _big_action_type big_action;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _small_action_type;
  _small_action_type small_action;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _big_action_list_type;
  _big_action_list_type big_action_list;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _small_action_list_type;
  _small_action_list_type small_action_list;

   typedef int32_t _big_cup_type;
  _big_cup_type big_cup;

   typedef int32_t _small_cup_type;
  _small_cup_type small_cup;

   typedef uint8_t _team_type;
  _team_type team;

   typedef int32_t _status_type;
  _status_type status;

   typedef int32_t _small_score_type;
  _small_score_type small_score;

   typedef int32_t _big_score_type;
  _big_score_type big_score;





  typedef boost::shared_ptr< ::main2021::Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::main2021::Data_<ContainerAllocator> const> ConstPtr;

}; // struct Data_

typedef ::main2021::Data_<std::allocator<void> > Data;

typedef boost::shared_ptr< ::main2021::Data > DataPtr;
typedef boost::shared_ptr< ::main2021::Data const> DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::main2021::Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::main2021::Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::main2021::Data_<ContainerAllocator1> & lhs, const ::main2021::Data_<ContainerAllocator2> & rhs)
{
  return lhs.big_chicken_pos == rhs.big_chicken_pos &&
    lhs.small_chicken_pos == rhs.small_chicken_pos &&
    lhs.big_action == rhs.big_action &&
    lhs.small_action == rhs.small_action &&
    lhs.big_action_list == rhs.big_action_list &&
    lhs.small_action_list == rhs.small_action_list &&
    lhs.big_cup == rhs.big_cup &&
    lhs.small_cup == rhs.small_cup &&
    lhs.team == rhs.team &&
    lhs.status == rhs.status &&
    lhs.small_score == rhs.small_score &&
    lhs.big_score == rhs.big_score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::main2021::Data_<ContainerAllocator1> & lhs, const ::main2021::Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace main2021

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::main2021::Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::main2021::Data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::main2021::Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::main2021::Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::main2021::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4e5f8be870de6fe33323461ba490ff0";
  }

  static const char* value(const ::main2021::Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4e5f8be870de6feULL;
  static const uint64_t static_value2 = 0x33323461ba490ff0ULL;
};

template<class ContainerAllocator>
struct DataType< ::main2021::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "main2021/Data";
  }

  static const char* value(const ::main2021::Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::main2021::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] big_chicken_pos\n"
"float32[] small_chicken_pos\n"
"int32[] big_action\n"
"int32[] small_action\n"
"int32[] big_action_list\n"
"int32[] small_action_list\n"
"int32 big_cup\n"
"int32 small_cup\n"
"bool team\n"
"int32 status\n"
"int32 small_score\n"
"int32 big_score\n"
"\n"
;
  }

  static const char* value(const ::main2021::Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::main2021::Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.big_chicken_pos);
      stream.next(m.small_chicken_pos);
      stream.next(m.big_action);
      stream.next(m.small_action);
      stream.next(m.big_action_list);
      stream.next(m.small_action_list);
      stream.next(m.big_cup);
      stream.next(m.small_cup);
      stream.next(m.team);
      stream.next(m.status);
      stream.next(m.small_score);
      stream.next(m.big_score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::main2021::Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::main2021::Data_<ContainerAllocator>& v)
  {
    s << indent << "big_chicken_pos[]" << std::endl;
    for (size_t i = 0; i < v.big_chicken_pos.size(); ++i)
    {
      s << indent << "  big_chicken_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.big_chicken_pos[i]);
    }
    s << indent << "small_chicken_pos[]" << std::endl;
    for (size_t i = 0; i < v.small_chicken_pos.size(); ++i)
    {
      s << indent << "  small_chicken_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.small_chicken_pos[i]);
    }
    s << indent << "big_action[]" << std::endl;
    for (size_t i = 0; i < v.big_action.size(); ++i)
    {
      s << indent << "  big_action[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.big_action[i]);
    }
    s << indent << "small_action[]" << std::endl;
    for (size_t i = 0; i < v.small_action.size(); ++i)
    {
      s << indent << "  small_action[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.small_action[i]);
    }
    s << indent << "big_action_list[]" << std::endl;
    for (size_t i = 0; i < v.big_action_list.size(); ++i)
    {
      s << indent << "  big_action_list[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.big_action_list[i]);
    }
    s << indent << "small_action_list[]" << std::endl;
    for (size_t i = 0; i < v.small_action_list.size(); ++i)
    {
      s << indent << "  small_action_list[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.small_action_list[i]);
    }
    s << indent << "big_cup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.big_cup);
    s << indent << "small_cup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.small_cup);
    s << indent << "team: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.team);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "small_score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.small_score);
    s << indent << "big_score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.big_score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAIN2021_MESSAGE_DATA_H
